"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var __createBinding = void 0 && (void 0).__createBinding || (Object.create ? function (o, m, k, k2) {
  if (k2 === undefined) k2 = k;
  var desc = Object.getOwnPropertyDescriptor(m, k);

  if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
    desc = {
      enumerable: true,
      get: function get() {
        return m[k];
      }
    };
  }

  Object.defineProperty(o, k2, desc);
} : function (o, m, k, k2) {
  if (k2 === undefined) k2 = k;
  o[k2] = m[k];
});

var __exportStar = void 0 && (void 0).__exportStar || function (m, exports) {
  for (var p in m) {
    if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
  }
};

var __importDefault = void 0 && (void 0).__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ApolloServer = void 0;

var express_1 = __importDefault(require("express"));

var http_1 = __importDefault(require("http"));

var apollo_server_express_1 = require("apollo-server-express");

var url_1 = require("url");

var apollo_server_core_1 = require("apollo-server-core");

__exportStar(require("./exports"), exports);

var ApolloServer =
/*#__PURE__*/
function (_apollo_server_expres) {
  _inherits(ApolloServer, _apollo_server_expres);

  function ApolloServer(config) {
    var _this;

    _classCallCheck(this, ApolloServer);

    var _a;

    var httpServer = http_1["default"].createServer();
    _this = _possibleConstructorReturn(this, _getPrototypeOf(ApolloServer).call(this, _objectSpread({}, config, {
      plugins: [].concat(_toConsumableArray((_a = config.plugins) !== null && _a !== void 0 ? _a : []), [(0, apollo_server_core_1.ApolloServerPluginDrainHttpServer)({
        httpServer: httpServer,
        stopGracePeriodMillis: config.stopGracePeriodMillis
      })])
    })));
    _this.httpServer = httpServer;
    _this.cors = config.cors;
    _this.onHealthCheck = config.onHealthCheck;
    _this.healthCheckPath = config === null || config === void 0 ? void 0 : config.healthCheckPath;
    return _this;
  }

  _createClass(ApolloServer, [{
    key: "createServerInfo",
    value: function createServerInfo() {
      var addressInfo = this.httpServer.address();
      var hostForUrl = addressInfo.address;

      if (hostForUrl === '' || hostForUrl === '::') {
        hostForUrl = 'localhost';
      }

      var url = (0, url_1.format)({
        protocol: 'http',
        hostname: hostForUrl,
        port: addressInfo.port,
        pathname: this.graphqlPath
      });
      return _objectSpread({}, addressInfo, {
        server: this.httpServer,
        url: url
      });
    }
  }, {
    key: "applyMiddleware",
    value: function applyMiddleware() {
      throw new Error('To use Apollo Server with an existing express application, please use apollo-server-express');
    }
  }, {
    key: "start",
    value: function start() {
      return regeneratorRuntime.async(function start$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              throw new Error("When using the `apollo-server` package, you don't need to call start(); just call listen().");

            case 1:
            case "end":
              return _context.stop();
          }
        }
      });
    }
  }, {
    key: "listen",
    value: function listen() {
      var _this2 = this;

      var _len,
          opts,
          _key,
          app,
          _args2 = arguments;

      return regeneratorRuntime.async(function listen$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              for (_len = _args2.length, opts = new Array(_len), _key = 0; _key < _len; _key++) {
                opts[_key] = _args2[_key];
              }

              _context2.next = 3;
              return regeneratorRuntime.awrap(this._start());

            case 3:
              app = (0, express_1["default"])();
              this.httpServer.on('request', app);
              app.disable('x-powered-by');

              _get(_getPrototypeOf(ApolloServer.prototype), "applyMiddleware", this).call(this, {
                app: app,
                path: '/',
                bodyParserConfig: {
                  limit: '50mb'
                },
                onHealthCheck: this.onHealthCheck,
                cors: typeof this.cors !== 'undefined' ? this.cors : {
                  origin: '*'
                },
                __internal_healthCheckPath: this.healthCheckPath
              });

              _context2.next = 9;
              return regeneratorRuntime.awrap(new Promise(function (resolve) {
                var _this2$httpServer;

                _this2.httpServer.once('listening', resolve);

                (_this2$httpServer = _this2.httpServer).listen.apply(_this2$httpServer, _toConsumableArray(opts.length ? opts : [{
                  port: 4000
                }]));
              }));

            case 9:
              return _context2.abrupt("return", this.createServerInfo());

            case 10:
            case "end":
              return _context2.stop();
          }
        }
      }, null, this);
    }
  }]);

  return ApolloServer;
}(apollo_server_express_1.ApolloServer);

exports.ApolloServer = ApolloServer;